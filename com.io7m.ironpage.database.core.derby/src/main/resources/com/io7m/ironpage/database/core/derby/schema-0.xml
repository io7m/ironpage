<?xml version="1.0" encoding="UTF-8" ?>

<statements xmlns="urn:com.io7m.ironpage.database.spi.statements:1:0">
  <statement>
    <![CDATA[
create schema core
    ]]>
  </statement>

  <comment>
    The schema version table stores the current version of the database schema.
    Implementations are expected to query this table on connecting to the
    database in order to ensure that the calling code is compatible with the
    tables in the database.
  </comment>

  <statement>
    <![CDATA[
create table core.schema_version (
  version_lock      char(1) not null default 'X',
  version_number    bigint not null,

  constraint check_lock_primary primary key (version_lock),
  constraint check_lock_locked check (version_lock = 'X')
)
    ]]>
  </statement>

  <comment>
    The audit table stores events relative to auditing. The audit_type column
    stores the type of audit event, and the rest of the columns store the
    fields of the event.
  </comment>

  <statement>
    <![CDATA[
create table core.audit (
  audit_time    timestamp not null,
  audit_type    varchar(64) not null,
  audit_arg0    varchar(256) not null,
  audit_arg1    varchar(256) not null,
  audit_arg2    varchar(256) not null,
  audit_arg3    varchar(256) not null
)
    ]]>
  </statement>

  <comment>
    The users table stores user accounts. Users are unambiguously identified by
    UUID values (stored here as ASCII due to various limitations in Jooq, Derby,
    and JDBC). Users have hashed passwords used to access their accounts, and
    those values are stored here as a field describing the algorithm (typically
    PBKDF2WithHmacSHA256), and the hashed value and parameters (such as the
    salt, and the number of iterations). Users also have email addresses, which
    do not need to be unique, and display names, which DO need to be unique.
    User accounts can also be locked (meaning that the user can no longer log
    in, and a reason must be specified for why the account is locked.
  </comment>

  <statement>
    <![CDATA[
create table core.users (
  user_id               char (36) not null,
  user_password_algo    varchar (64) not null,
  user_password_hash    varchar (128) not null,
  user_password_params  varchar (256) not null,
  user_email            varchar (128) not null,
  user_display_name     varchar (128) not null,
  user_locked_reason    varchar (128),

  constraint user_id_key primary key (user_id),
  constraint user_id_lower check (user_id = lower(user_id)),
  constraint user_id_nonzero check (user_id != '00000000-0000-0000-0000-000000000000'),
  constraint user_hash_lower check (user_password_hash = lower(user_password_hash)),
  constraint user_display_name_unique unique (user_display_name)
)
    ]]>
  </statement>

  <comment>
    The sessions table stores user sessions. Once a user has successfully
    authenticated, a session is created and can then be reused repeatedly
    without the user going through a potentially expensive authentication
    process each time. The session_updated column is updated each time the
    session is used.
  </comment>

  <comment>
    Session IDs are intended to be randomly generated 36-character
    Base64-encoded strings. 27 random bytes will produce a 36-character Base64
    string, so this implies that session IDs provide around 216 bits of
    security.
  </comment>

  <statement>
    <![CDATA[
create table core.sessions (
  session_id         char (36) not null,
  session_user_id    char (36) not null,
  session_updated    timestamp not null,

  constraint session_id_key primary key (session_id),
  constraint session_user_reference foreign key (session_user_id) references core.users (user_id)
)
    ]]>
  </statement>

  <comment>
    The redactions table stores a record of when and why a particular blob was
    redacted, and who redacted it.
  </comment>

  <statement>
    <![CDATA[
create table core.redactions (
  redaction_id        bigint generated always as identity not null,
  redaction_user      char (36) not null,
  redaction_time      timestamp not null,
  redaction_reason    varchar (128) not null,

  constraint redaction_id_key primary key (redaction_id),
  constraint redaction_user foreign key (redaction_user) references core.users (user_id)
)
    ]]>
  </statement>

  <comment>
    The blobs table stores opaque (but typed) blobs of data. Blobs are uniquely
    identified by their SHA-256 hash. Blobs carry an IANA media type, an owner,
    and a possible redaction (see the redactions table). Blobs that have been
    redacted have zero-length data fields.
  </comment>

  <statement>
    <![CDATA[
create table core.blobs (
  blob_id            char (64) not null,
  blob_data          blob (8M) not null,
  blob_media_type    varchar (128) not null,
  blob_owner         char (36) not null,
  blob_redaction     bigint,

  constraint blob_id_key primary key (blob_id),
  constraint blob_id_lower check (blob_id = lower(blob_id)),
  constraint blob_owner_reference foreign key (blob_owner) references core.users (user_id),
  constraint blob_redaction_reference foreign key (blob_redaction) references core.redactions (redaction_id)
)
    ]]>
  </statement>

  <statement>
    <![CDATA[
create table core.page_revisions (
  revision_id         bigint generated always as identity not null,
  revision_meta_id    char (64) not null,
  revision_data_id    char (64) not null,

  constraint revision_id primary key (revision_id),
  constraint revision_meta_id_ref foreign key (revision_meta_id) references core.blobs (blob_id),
  constraint revision_data_id_ref foreign key (revision_data_id) references core.blobs (blob_id)
)
    ]]>
  </statement>

  <statement>
    <![CDATA[
create table core.pages (
  page_id          char (36) not null,
  page_revision    bigint not null,

  constraint page_id_key primary key (page_id),
  constraint page_id_lower check (page_id = lower(page_id)),
  constraint page_revision_ref foreign key (page_revision) references core.page_revisions (revision_id)
)
    ]]>
  </statement>

  <statement>
    <![CDATA[
insert into core.schema_version (version_number) values (0)
    ]]>
  </statement>
</statements>